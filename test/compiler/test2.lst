vm16 version = 2.7.4
######################### Parser ############################
#### Code ####
 file: (  0) "test14.c"
 code: (  0) "global route"
 code: (  0) "global init"
 code: (  0) "global calc_height2"
 code: (  0) "global move_lift"
 code: (  0) "global loop"
 code: (  0) "jump 8"
 code: (  0) ".org 8"
 code: (  0) "call @init"
 code: (  0) "call init"
 code: (  0) "@loop:"
 code: (  0) "call loop"
 code: (  0) "nop"
 code: (  0) "jump @loop"
 code: (  0) "@init:"
 code: (  0) "ret"
 code: (  3) "init:"
 code: (  3) "ret"
 code: (  6) "calc_height2:"
 code: (  7) "move A, [SP+1]"
 code: (  7) "ret"
 code: ( 10) "move_lift:"
 code: ( 11) "push [SP+1]"
 code: ( 11) "call calc_height2"
 code: ( 11) "add SP, #1"
 code: ( 11) "move B, #route"
 code: ( 11) "add B, #1"
 code: ( 11) "move X, B"
 code: ( 11) "move [X], A"
 code: ( 11) "ret"
 code: ( 14) "loop:"
 code: ( 15) "push #2"
 code: ( 15) "call move_lift"
 code: ( 15) "add SP, #1"
 code: ( 15) "ret"
 data: (  1) "route: 0,0,0"
#### Debug ####
 file   0 test14.c oops 
 gvar   1 route route[] 
 func   3 init oops 
 svar   3 @num_stack_var@ -0 
 func   6 calc_height2 oops 
  ret   7 -1000 oops 
 svar   7 dest_floor 1 
 svar   7 @num_stack_var@ -0 
 func  10 move_lift oops 
 call  11 calc_height2 calc_height2 
 svar  11 floor 1 
 svar  11 @num_stack_var@ -0 
 func  14 loop oops 
 call  15 move_lift move_lift 
 svar  15 @num_stack_var@ -0 
 endf  16 test14.c oops 
######################### ASM ############################
;##### test14.c #####
newfile test14.c
  .code
  global route
  global init
  global calc_height2
  global move_lift
  global loop
  jump 8
  .org 8
  call @init
  call init
@loop:
  call loop
  nop
  jump @loop
@init:
  ret
;   1: var route[] = {0,0,0};
;   3: func init() {
init:
  ret
;   4: }
;   6: func calc_height2(dest_floor) {
calc_height2:
;   7:   return dest_floor;
  move A, [SP+1]
  ret
;   8: }
;  10: func move_lift(floor) {
move_lift:
;  11:   route[1] = calc_height2(floor);
  push [SP+1]
  call calc_height2
  add SP, #1
  move B, #route
  add B, #1
  move X, B
  move [X], A
  ret
;  12: }
;  14: func loop() {
loop:
;  15:   move_lift(2);
  push #2
  call move_lift
  add SP, #1
  ret
;  16: }
  .data
route: 0,0,0
######################### BIN ############################
#### Code ####
 file   0 0000: test14.c
 code   0 0000: 1200 0008
 code   0 0008: 1600 0011
 code   0 000A: 1600 0012
 code   0 000C: 1600 0021
 code   0 000E: 0000
 code   0 000F: 1200 000C
 code   0 0011: 1800
 code   3 0012: 1800
 code   7 0013: 2013 0001
 code   7 0015: 1800
 code  11 0016: 6A60 0001
 code  11 0018: 1600 0013
 code  11 001A: 30ED
 code  11 001B: 2030 0027
 code  11 001D: 302D
 code  11 001E: 2081
 code  11 001F: 2100
 code  11 0020: 1800
 code  15 0021: 6A00 0002
 code  15 0023: 1600 0016
 code  15 0025: 30ED
 code  15 0026: 1800
 code   1 0027: 0000 0000 0000
#### Debug ####
 file   0 0000: "test14.c"
 gvar   1 0027: "route[]"
 func   3 0012: "init"
 svar   3    0: "@num_stack_var@"
 func   6 0013: "calc_height2"
  ret   7 0000: "0"
 svar   7    1: "dest_floor"
 svar   7    0: "@num_stack_var@"
 func  10 0016: "move_lift"
 call  11 0013: "calc_height2"
 svar  11    1: "floor"
 svar  11    0: "@num_stack_var@"
 func  14 0021: "loop"
 call  15 0016: "move_lift"
 svar  15    0: "@num_stack_var@"
 endf  16 002A: "test14.c"
